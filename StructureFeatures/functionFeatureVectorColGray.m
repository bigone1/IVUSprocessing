function [featureVector,strFeatures,featureVectorNorm, polarImageFiltered] =...
    functionFeatureVectorColGray( polarImage, varargin )
[heightPolar,widthPolar] = size(polarImage);
grayscaleInput = true;
th = 22;

polarImageFiltered = functionMedianFilter( polarImage, 7, 10, widthPolar, heightPolar );

mediaCol = mean(polarImageFiltered);%F1
maxCol = max(polarImageFiltered);%F3
minCol = min(polarImageFiltered);%F4
StdCol = std(polarImageFiltered);%F2
[ ~, totalRadialEnergy, ~] = functionRadialCumulativeMeanGil( polarImageFiltered );%F5
[ ~, ~,~,maxGradienteAbs, ~, normalizedCantPositivosCol] =...
    functionPositiveClassProfile( polarImageFiltered, grayscaleInput, th );
[MeanRelativeShadow ] = functionRelativeShadowCiompi(polarImageFiltered,th,...
    widthPolar,heightPolar);
MeanRelativeShadow = mean(MeanRelativeShadow);
MeanShadow = functionShadowCiompi( polarImageFiltered, th, widthPolar, heightPolar );
MeanShadow = mean(MeanShadow);

[ firstMaxGradientCol, firstMinGradientCol,secondMaxGradientCol, secondMinGradientCol,...
    ~,~,~,~,~,~,~,~,~,~,~,~, sumMinGradient,sumMaxGradient] =...
    functionGradientsCol( polarImageFiltered );
[medianUnderMaximo,RatioDong2013, stdShadow, candidatesCalcificationOtsu] =...
    functionFeaturesCalcificationGray( polarImageFiltered );
[ slopes,intercepts,lost ] = functionLinearApproxColumn( polarImageFiltered );%F20-F22

featureVector = [mediaCol;StdCol;maxCol;minCol;...
    totalRadialEnergy;...
    maxGradienteAbs;normalizedCantPositivosCol;...
    MeanShadow;MeanRelativeShadow;...
    medianUnderMaximo;stdShadow;RatioDong2013;...
    firstMinGradientCol;secondMinGradientCol;...
    firstMaxGradientCol;secondMaxGradientCol;...
    sumMinGradient;sumMaxGradient;...
    candidatesCalcificationOtsu;...
    slopes;intercepts;lost];

strFeatures = {'F1';'F2';'F3';'F4';'F5';
    'F6';'F7';'F8';'F9';...
    'F10';'F11';'F12';'F13';'F14';...
    'F15';'F16';'F17';'F18';...
    'F19';'F20';'F21';'F22'};

[nFeatures, nSamples] = size(featureVector);
featureVectorNorm = zeros(nFeatures,nSamples);
for i=1:nFeatures
    featAux = featureVector(i,:);
    stdAux = std(featAux);
    if stdAux<0.0000001
        stdAux=0.0000001;
    end
    featAux = (featAux-mean(featAux))/stdAux;
    featureVectorNorm(i,:) = featAux;
end


